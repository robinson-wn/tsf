apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: tsf
  namespace: default
  labels:
    app: tsf
spec:
  type: Python
  pythonVersion: "3"
  mode: cluster
  image: "k8sparktsf"
  # https://skaffold.dev/docs/environment/local-cluster/
  #  Skaffoldâ€™s direct loading of images into a local cluster does mean that resources specifying an
  # imagePullPolicy: Always may fail as the images are not be pushed to the remote registry.
  # On Docker for Desktop, don't specify imagePullPolicy
  # imagePullPolicy: Always
  mainApplicationFile: local:///opt/spark/work-dir/run_tsf.py
  sparkConf:
    "spark.ui.port": "4040"
    "spark.memory.fraction": "0.8"
  sparkVersion: "3.2"
  restartPolicy:
    type: Never
  driver:
    coreLimit: "1"
    coreRequest: "1m"
    memory: "2g"
    # Improve memory management?
    javaOptions: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
    labels:
      version: "3.2"
    serviceAccount: spark
  executor:
    coreLimit: "1"
    coreRequest: "1m"
    instances: 1
    memory: "2g"
    # Improve memory management?
    javaOptions: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
    labels:
      version: "3.2"
  dynamicAllocation:
    enabled: true
    initialExecutors: 1
    minExecutors: 1
    # Reduce for smaller cluster, increase for larger
    maxExecutors: 4
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sparkui-loadbalancer
  name: sparkui-loadbalancer
spec:
  type: LoadBalancer
  selector:
    # The UI runs in the driver, so use that for the selector
    spark-role: driver
  ports:
    - name: sparkui
      protocol: TCP
      port: 4040
      targetPort: 4040